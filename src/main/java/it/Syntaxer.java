
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package it;

import it.util.SintaticAnalysis.SintaticEnum;
import it.util.SintaticAnalysis.SintaticNode;
import it.util.SintaticAnalysis.Exception.SintaxException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntaxer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntaxer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntaxer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntaxer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\005\000\002\002\004\000\002\002" +
    "\006\000\002\003\002\000\002\003\004\000\002\023\002" +
    "\000\002\023\004\000\002\004\010\000\002\005\005\000" +
    "\002\005\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\011\003\000\002\011" +
    "\005\000\002\011\003\000\002\011\005\000\002\012\003" +
    "\000\002\012\005\000\002\024\016\000\002\024\014\000" +
    "\002\014\002\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\016\004\000\002\016\005\000\002\006" +
    "\002\000\002\006\004\000\002\017\004\000\002\017\004" +
    "\000\002\017\004\000\002\017\004\000\002\017\004\000" +
    "\002\017\004\000\002\017\005\000\002\020\012\000\002" +
    "\021\002\000\002\021\005\000\002\022\011\000\002\025" +
    "\005\000\002\025\004\000\002\013\003\000\002\013\005" +
    "\000\002\026\004\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\010\005\000\002\027\006\000\002" +
    "\027\005\000\002\030\003\000\002\030\005\000\002\030" +
    "\004\000\002\030\006\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\004\000\002\031\004\000\002\031" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\020\011\ufffe\012\ufffe\025\005\026\012\027" +
    "\014\030\007\031\013\001\002\000\004\004\245\001\002" +
    "\000\040\004\ufff7\013\ufff7\014\ufff7\025\ufff7\026\ufff7\027" +
    "\ufff7\030\ufff7\031\ufff7\053\ufff7\056\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\064\ufff7\001\002\000\004\002\244\001" +
    "\002\000\040\004\ufff6\013\ufff6\014\ufff6\025\ufff6\026\ufff6" +
    "\027\ufff6\030\ufff6\031\ufff6\053\ufff6\056\ufff6\060\ufff6\061" +
    "\ufff6\062\ufff6\063\ufff6\064\ufff6\001\002\000\006\011\ufffc" +
    "\012\116\001\002\000\046\004\ufffe\011\ufffe\012\ufffe\013" +
    "\ufffe\014\ufffe\025\005\026\012\027\014\030\007\031\013" +
    "\053\ufffe\055\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063" +
    "\ufffe\064\ufffe\001\002\000\040\004\ufff4\013\ufff4\014\ufff4" +
    "\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\053\ufff4\056" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\001\002" +
    "\000\004\004\015\001\002\000\040\004\ufff5\013\ufff5\014" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\053\ufff5" +
    "\056\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\001" +
    "\002\000\004\032\023\001\002\000\006\022\uffef\023\021" +
    "\001\002\000\004\022\020\001\002\000\046\004\ufff8\011" +
    "\ufff8\012\ufff8\013\ufff8\014\ufff8\025\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\053\ufff8\055\ufff8\056\ufff8\060\ufff8\061" +
    "\ufff8\062\ufff8\063\ufff8\064\ufff8\001\002\000\004\004\015" +
    "\001\002\000\004\022\uffee\001\002\000\024\004\035\005" +
    "\034\006\025\007\027\010\033\016\030\017\032\034\024" +
    "\052\036\001\002\000\024\004\035\005\034\006\025\007" +
    "\027\010\033\016\030\017\032\034\024\052\036\001\002" +
    "\000\052\020\uffc7\022\uffc7\023\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\054" +
    "\uffc7\057\uffc7\001\002\000\044\022\uffd0\023\uffd0\033\044" +
    "\034\040\035\051\036\056\037\047\040\042\041\052\042" +
    "\045\043\053\044\054\045\046\046\050\047\043\050\041" +
    "\051\055\001\002\000\052\020\uffc6\022\uffc6\023\uffc6\033" +
    "\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050" +
    "\uffc6\051\uffc6\054\uffc6\057\uffc6\001\002\000\052\020\uffc4" +
    "\022\uffc4\023\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037" +
    "\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\051\uffc4\054\uffc4\057\uffc4\001" +
    "\002\000\052\020\uffc3\022\uffc3\023\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3" +
    "\054\uffc3\057\uffc3\001\002\000\024\004\035\005\034\006" +
    "\025\007\027\010\033\016\030\017\032\034\024\052\036" +
    "\001\002\000\052\020\uffc9\022\uffc9\023\uffc9\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9\050\uffc9\051" +
    "\uffc9\054\uffc9\057\uffc9\001\002\000\052\020\uffc8\022\uffc8" +
    "\023\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\054\uffc8\057\uffc8\001\002\000" +
    "\054\017\076\020\uffc5\022\uffc5\023\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\054\uffc5\057\uffc5\001\002\000\024\004\035\005\034\006" +
    "\025\007\027\010\033\016\030\017\032\034\024\052\036" +
    "\001\002\000\052\020\uffb2\022\uffb2\023\uffb2\033\044\034" +
    "\040\035\051\036\056\037\047\040\042\041\052\042\045" +
    "\043\053\044\054\045\046\046\050\047\043\050\uffb2\051" +
    "\uffb2\054\uffb2\057\uffb2\001\002\000\024\004\035\005\034" +
    "\006\025\007\027\010\033\016\030\017\032\034\024\052" +
    "\036\001\002\000\024\004\035\005\034\006\025\007\027" +
    "\010\033\016\030\017\032\034\024\052\036\001\002\000" +
    "\024\004\035\005\034\006\025\007\027\010\033\016\030" +
    "\017\032\034\024\052\036\001\002\000\024\004\035\005" +
    "\034\006\025\007\027\010\033\016\030\017\032\034\024" +
    "\052\036\001\002\000\024\004\035\005\034\006\025\007" +
    "\027\010\033\016\030\017\032\034\024\052\036\001\002" +
    "\000\024\004\035\005\034\006\025\007\027\010\033\016" +
    "\030\017\032\034\024\052\036\001\002\000\024\004\035" +
    "\005\034\006\025\007\027\010\033\016\030\017\032\034" +
    "\024\052\036\001\002\000\024\004\035\005\034\006\025" +
    "\007\027\010\033\016\030\017\032\034\024\052\036\001" +
    "\002\000\024\004\035\005\034\006\025\007\027\010\033" +
    "\016\030\017\032\034\024\052\036\001\002\000\024\004" +
    "\035\005\034\006\025\007\027\010\033\016\030\017\032" +
    "\034\024\052\036\001\002\000\024\004\035\005\034\006" +
    "\025\007\027\010\033\016\030\017\032\034\024\052\036" +
    "\001\002\000\024\004\035\005\034\006\025\007\027\010" +
    "\033\016\030\017\032\034\024\052\036\001\002\000\024" +
    "\004\035\005\034\006\025\007\027\010\033\016\030\017" +
    "\032\034\024\052\036\001\002\000\024\004\035\005\034" +
    "\006\025\007\027\010\033\016\030\017\032\034\024\052" +
    "\036\001\002\000\024\004\035\005\034\006\025\007\027" +
    "\010\033\016\030\017\032\034\024\052\036\001\002\000" +
    "\052\020\uffbe\022\uffbe\023\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\uffbe\037\uffbe\040\042\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\054\uffbe" +
    "\057\uffbe\001\002\000\052\020\uffba\022\uffba\023\uffba\033" +
    "\044\034\040\035\051\036\056\037\047\040\042\041\052" +
    "\042\045\043\053\044\054\045\046\046\050\047\043\050" +
    "\041\051\uffba\054\uffba\057\uffba\001\002\000\036\020\uffb7" +
    "\022\uffb7\023\uffb7\033\044\034\040\035\051\036\056\037" +
    "\047\040\042\041\052\050\uffb7\051\uffb7\054\uffb7\057\uffb7" +
    "\001\002\000\036\020\uffb4\022\uffb4\023\uffb4\033\044\034" +
    "\040\035\051\036\056\037\047\040\042\041\052\050\uffb4" +
    "\051\uffb4\054\uffb4\057\uffb4\001\002\000\052\020\uffbb\022" +
    "\uffbb\023\uffbb\033\044\034\040\035\051\036\056\037\047" +
    "\040\042\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\054\uffbb\057\uffbb\001\002" +
    "\000\052\020\uffc0\022\uffc0\023\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\042\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\054" +
    "\uffc0\057\uffc0\001\002\000\036\020\uffb9\022\uffb9\023\uffb9" +
    "\033\044\034\040\035\051\036\056\037\047\040\042\041" +
    "\052\050\uffb9\051\uffb9\054\uffb9\057\uffb9\001\002\000\052" +
    "\020\uffbf\022\uffbf\023\uffbf\033\uffbf\034\uffbf\035\uffbf\036" +
    "\uffbf\037\uffbf\040\042\041\uffbf\042\uffbf\043\uffbf\044\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\054\uffbf\057" +
    "\uffbf\001\002\000\036\020\uffb6\022\uffb6\023\uffb6\033\044" +
    "\034\040\035\051\036\056\037\047\040\042\041\052\050" +
    "\uffb6\051\uffb6\054\uffb6\057\uffb6\001\002\000\036\020\uffb5" +
    "\022\uffb5\023\uffb5\033\044\034\040\035\051\036\056\037" +
    "\047\040\042\041\052\050\uffb5\051\uffb5\054\uffb5\057\uffb5" +
    "\001\002\000\052\020\uffc2\022\uffc2\023\uffc2\033\uffc2\034" +
    "\uffc2\035\051\036\056\037\047\040\042\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051" +
    "\uffc2\054\uffc2\057\uffc2\001\002\000\036\020\uffb8\022\uffb8" +
    "\023\uffb8\033\044\034\040\035\051\036\056\037\047\040" +
    "\042\041\052\050\uffb8\051\uffb8\054\uffb8\057\uffb8\001\002" +
    "\000\052\020\uffbc\022\uffbc\023\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\036\uffbc\037\uffbc\040\042\041\uffbc\042\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\054" +
    "\uffbc\057\uffbc\001\002\000\052\020\uffbd\022\uffbd\023\uffbd" +
    "\033\044\034\040\035\051\036\056\037\047\040\042\041" +
    "\052\042\045\043\053\044\054\045\046\046\050\047\043" +
    "\050\uffbd\051\uffbd\054\uffbd\057\uffbd\001\002\000\052\020" +
    "\uffc1\022\uffc1\023\uffc1\033\uffc1\034\uffc1\035\051\036\056" +
    "\037\047\040\042\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045" +
    "\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\054\uffc1\057\uffc1" +
    "\001\002\000\030\004\035\005\034\006\025\007\027\010" +
    "\033\016\030\017\032\020\102\024\100\034\024\052\036" +
    "\001\002\000\044\020\uffcd\023\107\033\044\034\040\035" +
    "\051\036\056\037\047\040\042\041\052\042\045\043\053" +
    "\044\054\045\046\046\050\047\043\050\041\051\055\001" +
    "\002\000\004\004\104\001\002\000\004\020\103\001\002" +
    "\000\052\020\uffce\022\uffce\023\uffce\033\uffce\034\uffce\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051\uffce\054" +
    "\uffce\057\uffce\001\002\000\052\020\uffcf\022\uffcf\023\uffcf" +
    "\033\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\054\uffcf\057\uffcf\001\002\000\006\020" +
    "\uffcb\023\105\001\002\000\026\004\035\005\034\006\025" +
    "\007\027\010\033\016\030\017\032\024\100\034\024\052" +
    "\036\001\002\000\004\020\uffca\001\002\000\026\004\035" +
    "\005\034\006\025\007\027\010\033\016\030\017\032\024" +
    "\100\034\024\052\036\001\002\000\004\020\uffcc\001\002" +
    "\000\042\020\112\033\044\034\040\035\051\036\056\037" +
    "\047\040\042\041\052\042\045\043\053\044\054\045\046" +
    "\046\050\047\043\050\041\051\055\001\002\000\052\020" +
    "\uffb1\022\uffb1\023\uffb1\033\uffb1\034\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045" +
    "\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\054\uffb1\057\uffb1" +
    "\001\002\000\052\020\uffb3\022\uffb3\023\uffb3\033\uffb3\034" +
    "\uffb3\035\051\036\056\037\047\040\042\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\054\uffb3\057\uffb3\001\002\000\034\004\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\014\ufffd\053\ufffd\055\ufffd\056\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\001\002\000\006" +
    "\011\ufffc\012\116\001\002\000\004\004\212\001\002\000" +
    "\004\011\120\001\002\000\040\004\ufffe\013\ufffe\014\ufffe" +
    "\025\005\026\012\027\014\030\007\031\013\053\ufffe\056" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002" +
    "\000\006\002\001\003\122\001\002\000\004\002\uffff\001" +
    "\002\000\026\004\136\013\uffe5\014\143\053\133\056\125" +
    "\060\124\061\137\062\130\063\144\064\126\001\002\000" +
    "\004\004\205\001\002\000\024\004\035\005\034\006\025" +
    "\007\027\010\033\016\030\017\032\034\024\052\036\001" +
    "\002\000\024\004\035\005\034\006\025\007\027\010\033" +
    "\016\030\017\032\034\024\052\036\001\002\000\004\022" +
    "\175\001\002\000\024\004\035\005\034\006\025\007\027" +
    "\010\033\016\030\017\032\034\024\052\036\001\002\000" +
    "\004\022\173\001\002\000\004\022\172\001\002\000\024" +
    "\004\035\005\034\006\025\007\027\010\033\016\030\017" +
    "\032\034\024\052\036\001\002\000\004\013\155\001\002" +
    "\000\004\022\154\001\002\000\006\017\076\032\023\001" +
    "\002\000\024\004\035\005\034\006\025\007\027\010\033" +
    "\016\030\017\032\034\024\052\036\001\002\000\030\004" +
    "\136\013\uffe5\014\143\053\133\055\uffe5\056\125\060\124" +
    "\061\137\062\130\063\144\064\126\001\002\000\004\022" +
    "\151\001\002\000\004\022\150\001\002\000\024\004\035" +
    "\005\034\006\025\007\027\010\033\016\030\017\032\034" +
    "\024\052\036\001\002\000\024\004\035\005\034\006\025" +
    "\007\027\010\033\016\030\017\032\034\024\052\036\001" +
    "\002\000\042\022\uffd1\033\044\034\040\035\051\036\056" +
    "\037\047\040\042\041\052\042\045\043\053\044\054\045" +
    "\046\046\050\047\043\050\041\051\055\001\002\000\042" +
    "\022\147\033\044\034\040\035\051\036\056\037\047\040" +
    "\042\041\052\042\045\043\053\044\054\045\046\046\050" +
    "\047\043\050\041\051\055\001\002\000\030\004\uffdd\013" +
    "\uffdd\014\uffdd\053\uffdd\055\uffdd\056\uffdd\060\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\064\uffdd\001\002\000\030\004\uffe1\013" +
    "\uffe1\014\uffe1\053\uffe1\055\uffe1\056\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\001\002\000\030\004\uffe0\013" +
    "\uffe0\014\uffe0\053\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\001\002\000\006\013\uffe4\055" +
    "\uffe4\001\002\000\042\022\uffd4\033\044\034\040\035\051" +
    "\036\056\037\047\040\042\041\052\042\045\043\053\044" +
    "\054\045\046\046\050\047\043\050\041\051\055\001\002" +
    "\000\030\004\uffdf\013\uffdf\014\uffdf\053\uffdf\055\uffdf\056" +
    "\uffdf\060\uffdf\061\uffdf\062\uffdf\063\uffdf\064\uffdf\001\002" +
    "\000\004\011\156\001\002\000\004\022\157\001\002\000" +
    "\006\002\ufffa\003\ufffa\001\002\000\042\033\044\034\040" +
    "\035\051\036\056\037\047\040\042\041\052\042\045\043" +
    "\053\044\054\045\046\046\050\047\043\050\041\051\055" +
    "\054\161\001\002\000\042\004\ufffe\013\ufffe\014\ufffe\025" +
    "\005\026\012\027\014\030\007\031\013\053\ufffe\055\ufffe" +
    "\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001" +
    "\002\000\030\004\136\013\uffe5\014\143\053\133\055\uffe5" +
    "\056\125\060\124\061\137\062\130\063\144\064\126\001" +
    "\002\000\006\013\uffdb\055\164\001\002\000\040\004\ufffe" +
    "\013\ufffe\014\ufffe\025\005\026\012\027\014\030\007\031" +
    "\013\053\ufffe\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe" +
    "\064\ufffe\001\002\000\004\013\166\001\002\000\004\053" +
    "\167\001\002\000\004\022\uffdc\001\002\000\026\004\136" +
    "\013\uffe5\014\143\053\133\056\125\060\124\061\137\062" +
    "\130\063\144\064\126\001\002\000\004\013\uffda\001\002" +
    "\000\030\004\uffe3\013\uffe3\014\uffe3\053\uffe3\055\uffe3\056" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002" +
    "\000\030\004\uffde\013\uffde\014\uffde\053\uffde\055\uffde\056" +
    "\uffde\060\uffde\061\uffde\062\uffde\063\uffde\064\uffde\001\002" +
    "\000\042\022\uffd3\033\044\034\040\035\051\036\056\037" +
    "\047\040\042\041\052\042\045\043\053\044\054\045\046" +
    "\046\050\047\043\050\041\051\055\001\002\000\030\004" +
    "\uffe2\013\uffe2\014\uffe2\053\uffe2\055\uffe2\056\uffe2\060\uffe2" +
    "\061\uffe2\062\uffe2\063\uffe2\064\uffe2\001\002\000\042\022" +
    "\uffd2\033\044\034\040\035\051\036\056\037\047\040\042" +
    "\041\052\042\045\043\053\044\054\045\046\046\050\047" +
    "\043\050\041\051\055\001\002\000\042\033\044\034\040" +
    "\035\051\036\056\037\047\040\042\041\052\042\045\043" +
    "\053\044\054\045\046\046\050\047\043\050\041\051\055" +
    "\057\200\001\002\000\040\004\ufffe\013\ufffe\014\ufffe\025" +
    "\005\026\012\027\014\030\007\031\013\053\ufffe\056\ufffe" +
    "\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002\000" +
    "\026\004\136\013\uffe5\014\143\053\133\056\125\060\124" +
    "\061\137\062\130\063\144\064\126\001\002\000\004\013" +
    "\203\001\002\000\004\057\204\001\002\000\004\022\uffd9" +
    "\001\002\000\030\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\016\uffd6\017\uffd6\022\uffd6\023\uffd6\034\uffd6\052\uffd6" +
    "\001\002\000\030\004\035\005\034\006\025\007\027\010" +
    "\033\016\030\017\032\022\uffd7\023\210\034\024\052\036" +
    "\001\002\000\042\022\uffd8\033\044\034\040\035\051\036" +
    "\056\037\047\040\042\041\052\042\045\043\053\044\054" +
    "\045\046\046\050\047\043\050\041\051\055\001\002\000" +
    "\004\004\211\001\002\000\030\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\016\uffd5\017\uffd5\022\uffd5\023\uffd5\034" +
    "\uffd5\052\uffd5\001\002\000\004\017\213\001\002\000\016" +
    "\015\220\020\uffeb\025\005\026\012\027\014\030\007\001" +
    "\002\000\004\004\242\001\002\000\004\020\225\001\002" +
    "\000\006\020\uffe9\023\uffe9\001\002\000\006\020\uffea\023" +
    "\223\001\002\000\012\025\005\026\012\027\014\030\007" +
    "\001\002\000\004\004\222\001\002\000\006\020\uffe6\023" +
    "\uffe6\001\002\000\014\015\220\025\005\026\012\027\014" +
    "\030\007\001\002\000\006\020\uffe8\023\uffe8\001\002\000" +
    "\042\004\ufffe\013\ufffe\014\ufffe\021\227\025\005\026\012" +
    "\027\014\030\007\031\013\053\ufffe\056\ufffe\060\ufffe\061" +
    "\ufffe\062\ufffe\063\ufffe\064\ufffe\001\002\000\026\004\136" +
    "\013\uffe5\014\143\053\133\056\125\060\124\061\137\062" +
    "\130\063\144\064\126\001\002\000\012\025\005\026\012" +
    "\027\014\030\007\001\002\000\040\004\ufffe\013\ufffe\014" +
    "\ufffe\025\005\026\012\027\014\030\007\031\013\053\ufffe" +
    "\056\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\001" +
    "\002\000\026\004\136\013\uffe5\014\143\053\133\056\125" +
    "\060\124\061\137\062\130\063\144\064\126\001\002\000" +
    "\004\013\233\001\002\000\004\012\234\001\002\000\004" +
    "\022\235\001\002\000\006\011\uffed\012\uffed\001\002\000" +
    "\004\013\237\001\002\000\004\012\240\001\002\000\004" +
    "\022\241\001\002\000\006\011\uffec\012\uffec\001\002\000" +
    "\006\020\uffe7\023\uffe7\001\002\000\004\011\ufffb\001\002" +
    "\000\004\002\000\001\002\000\010\022\ufff3\023\ufff3\032" +
    "\023\001\002\000\006\022\251\023\250\001\002\000\006" +
    "\022\ufff1\023\ufff1\001\002\000\004\004\252\001\002\000" +
    "\046\004\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\025\ufff9" +
    "\026\ufff9\027\ufff9\030\ufff9\031\ufff9\053\ufff9\055\ufff9\056" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\064\ufff9\001\002" +
    "\000\010\022\ufff2\023\ufff2\032\023\001\002\000\006\022" +
    "\ufff0\023\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\251\000\012\002\005\003\007\005\010\007\003\001" +
    "\001\000\006\010\246\011\245\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\023\116\024" +
    "\114\001\001\000\010\003\113\005\010\007\003\001\001" +
    "\000\002\001\001\000\006\010\015\012\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\015\012\021\001" +
    "\001\000\002\001\001\000\006\027\030\031\025\001\001" +
    "\000\006\027\030\031\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\030\031\110\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\030" +
    "\031\036\001\001\000\002\001\001\000\006\027\030\031" +
    "\074\001\001\000\006\027\030\031\073\001\001\000\006" +
    "\027\030\031\072\001\001\000\006\027\030\031\071\001" +
    "\001\000\006\027\030\031\070\001\001\000\006\027\030" +
    "\031\067\001\001\000\006\027\030\031\066\001\001\000" +
    "\006\027\030\031\065\001\001\000\006\027\030\031\064" +
    "\001\001\000\006\027\030\031\063\001\001\000\006\027" +
    "\030\031\062\001\001\000\006\027\030\031\061\001\001" +
    "\000\006\027\030\031\060\001\001\000\006\027\030\031" +
    "\057\001\001\000\006\027\030\031\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\030\030\100\031" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\030\030\105\031\076\001\001\000\002" +
    "\001\001\000\010\027\030\030\107\031\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\242\024\114\001" +
    "\001\000\002\001\001\000\004\004\120\001\001\000\010" +
    "\003\122\005\010\007\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\133\010\134\017\137\020\131" +
    "\022\126\025\141\026\140\027\130\001\001\000\004\013" +
    "\205\001\001\000\006\027\030\031\176\001\001\000\006" +
    "\027\030\031\175\001\001\000\002\001\001\000\006\027" +
    "\030\031\173\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\030\031\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\030\031\152" +
    "\001\001\000\022\006\151\010\134\017\137\020\131\022" +
    "\126\025\141\026\140\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\030\031\145\001\001\000" +
    "\006\027\030\031\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\161\005\010\007\003\001\001" +
    "\000\022\006\162\010\134\017\137\020\131\022\126\025" +
    "\141\026\140\027\130\001\001\000\004\021\164\001\001" +
    "\000\010\003\167\005\010\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\170" +
    "\010\134\017\137\020\131\022\126\025\141\026\140\027" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\200\005\010\007\003" +
    "\001\001\000\022\006\201\010\134\017\137\020\131\022" +
    "\126\025\141\026\140\027\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\030\031\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\213\014\214\015\216\016\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\007\213\016\223\001\001\000\002\001\001\000" +
    "\010\003\225\005\010\007\003\001\001\000\022\006\235" +
    "\010\134\017\137\020\131\022\126\025\141\026\140\027" +
    "\130\001\001\000\004\007\227\001\001\000\010\003\230" +
    "\005\010\007\003\001\001\000\022\006\231\010\134\017" +
    "\137\020\131\022\126\025\141\026\140\027\130\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\252\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntaxer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntaxer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntaxer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntaxer$actions {
  private final Syntaxer parser;

  /** Constructor */
  CUP$Syntaxer$actions(Syntaxer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntaxer$do_action_part00000000(
    int                        CUP$Syntaxer$act_num,
    java_cup.runtime.lr_parser CUP$Syntaxer$parser,
    java.util.Stack            CUP$Syntaxer$stack,
    int                        CUP$Syntaxer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntaxer$result;

      /* select the action based on the action number */
      switch (CUP$Syntaxer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList FunList Main 
            {
              SintaticNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode v = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode f = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode m = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.PROGRAM, v, f, m); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode start_val = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		RESULT = start_val;
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntaxer$parser.done_parsing();
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= VarDeclList FunList Main error 
            {
              SintaticNode RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode v = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode f = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode m = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.PROGRAM, v, f, m); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= 
            {
              SintaticNode RESULT =null;

              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDeclList ::= VarDecl VarDeclList 
            {
              SintaticNode RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode vd = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.VARDECLLIST, vd, vdl != null ? vdl.getChild().toArray() : null); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("VarDeclList",1, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunList ::= 
            {
              SintaticNode RESULT =null;

              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("FunList",17, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunList ::= Fun FunList 
            {
              SintaticNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode f = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode fl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.FUNLIST, f, fl != null ? fl.getChild().toArray() : null); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("FunList",17, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Main ::= MAIN VarDeclList StatList END MAIN SEMI 
            {
              SintaticNode RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		 RESULT = new SintaticNode(SintaticEnum.MAIN, vdl, sl); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Main",2, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl ::= Type IdListInit SEMI 
            {
              SintaticNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode t = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int ilileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int iliright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode ili = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.VARDECL, t, ili); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= VAR IdListInitObbl SEMI 
            {
              SintaticNode RESULT =null;
		int ilioleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int ilioright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode ilio = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.VARDECL, new SintaticNode(SintaticEnum.VAR), ilio); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= INTEGER 
            {
              SintaticNode RESULT =null;
		 RESULT = new SintaticNode(SintaticEnum.INTEGER); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL 
            {
              SintaticNode RESULT =null;
		 RESULT = new SintaticNode(SintaticEnum.BOOL); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= REAL 
            {
              SintaticNode RESULT =null;
		 RESULT = new SintaticNode(SintaticEnum.REAL); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= STRING 
            {
              SintaticNode RESULT =null;
		 RESULT = new SintaticNode(SintaticEnum.STRING); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= ID 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.ID, i); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= IdListInit COMMA ID 
            {
              SintaticNode RESULT =null;
		int ilileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int iliright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode ili = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLISTINIT, ili, new SintaticNode(SintaticEnum.COMMA), new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdListInit ::= AssignStat 
            {
              SintaticNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode a = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = a; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdListInit ::= IdListInit COMMA AssignStat 
            {
              SintaticNode RESULT =null;
		int ilileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int iliright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode ili = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode a = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLISTINIT, ili, new SintaticNode(SintaticEnum.COMMA), a); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInit",7, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdListInitObbl ::= AssignStat 
            {
              SintaticNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode a = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLISTINITOBBL, a); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",8, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IdListInitObbl ::= AssignStat COMMA IdListInitObbl 
            {
              SintaticNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode a = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int olioleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int olioright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode olio = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLISTINITOBBL, a, new SintaticNode(SintaticEnum.COMMA), olio != null ? olio.getChild().toArray() : null); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdListInitObbl",8, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Fun ::= FUN ID LPAR ParamDeclList RPAR COLON Type VarDeclList StatList END FUN SEMI 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-10)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).right;
		SintaticNode pdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).right;
		SintaticNode t = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		 RESULT = new SintaticNode(SintaticEnum.FUN, i, pdl, t, vdl, sl); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Fun",18, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-11)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Fun ::= FUN ID LPAR ParamDeclList RPAR VarDeclList StatList END FUN SEMI 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-8)).value;
		int pdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).left;
		int pdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).right;
		SintaticNode pdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		 RESULT = new SintaticNode(SintaticEnum.FUN, i, pdl, vdl, sl); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Fun",18, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-9)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ParamDeclList ::= 
            {
              SintaticNode RESULT =null;

              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              SintaticNode RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode nepdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = nepdl; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NonEmptyParamDeclList ::= ParDecl 
            {
              SintaticNode RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode pd = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = pd; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NonEmptyParamDeclList ::= NonEmptyParamDeclList COMMA ParDecl 
            {
              SintaticNode RESULT =null;
		int nepdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int nepdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode nepdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int pdleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode pd = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.PARAMDECLLIST, nepdl, new SintaticNode(SintaticEnum.COMMA), pd); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ParDecl ::= Type ID 
            {
              SintaticNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode t = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.PARDECL, t, new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecl ::= OUT Type ID 
            {
              SintaticNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode t = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.PARDECL, t, new SintaticNode(SintaticEnum.OUT), new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // StatList ::= 
            {
              SintaticNode RESULT =null;

              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("StatList",4, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // StatList ::= Stat StatList 
            {
              SintaticNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode s = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.STATLIST, s, sl != null ? sl.getChild().toArray() : null); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("StatList",4, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Stat ::= IfStat SEMI 
            {
              SintaticNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode is = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = is; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Stat ::= WhileStat SEMI 
            {
              SintaticNode RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode ws = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = ws; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Stat ::= ReadStat SEMI 
            {
              SintaticNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode rs = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = rs; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Stat ::= WriteStat SEMI 
            {
              SintaticNode RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode ws = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = ws; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Stat ::= AssignStat SEMI 
            {
              SintaticNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode as = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = as; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Stat ::= CallFun SEMI 
            {
              SintaticNode RESULT =null;
		int cfleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int cfright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode cf = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = cf; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Stat ::= RETURN Expr SEMI 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.RETURN, e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Stat",13, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IfStat ::= IF Expr THEN VarDeclList StatList Else END IF 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-4)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		 RESULT = new SintaticNode(SintaticEnum.IFSTAT, e, vdl, sl, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IfStat",14, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-7)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Else ::= 
            {
              SintaticNode RESULT =null;

              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Else",15, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Else ::= ELSE VarDeclList StatList 
            {
              SintaticNode RESULT =null;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.ELSESTAT, vdl, sl); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Else",15, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // WhileStat ::= WHILE Expr LOOP VarDeclList StatList END LOOP 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-5)).value;
		int vdlleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int vdlright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		SintaticNode vdl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode sl = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		 RESULT = new SintaticNode(SintaticEnum.WHILESTAT, e, vdl, sl); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("WhileStat",16, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-6)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ReadStat ::= READ IdList Expr 
            {
              SintaticNode RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode il = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.READSTAT, il, e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ReadStat ::= READ IdList 
            {
              SintaticNode RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode il = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.READSTAT, il); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IdList ::= ID 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLIST, new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdList",9, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IdList ::= IdList COMMA ID 
            {
              SintaticNode RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode il = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.IDLIST, il, new SintaticNode(SintaticEnum.COMMA), new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("IdList",9, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // WriteStat ::= WRITE Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.WRITESTAT, e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // WriteStat ::= WRITELN Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.WRITESTAT, "LN", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // WriteStat ::= WRITET Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.WRITESTAT, "ET", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // WriteStat ::= WRITEB Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.WRITESTAT, "EB", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // AssignStat ::= ID ASSIGN Expr 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.ASSIGNSTAT, new SintaticNode(SintaticEnum.ID, i), e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("AssignStat",6, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CallFun ::= ID LPAR ExprList RPAR 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode el = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.CALLFUN, i, el); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CallFun ::= ID LPAR RPAR 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		 RESULT = new SintaticNode(SintaticEnum.CALLFUN, i); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("CallFun",21, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExprList ::= Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = e; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExprList ::= Expr COMMA ExprList 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode el = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPRLIST, e, new SintaticNode(SintaticEnum.COMMA), el); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprList ::= OUTPAR ID 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPRLIST, new SintaticNode(SintaticEnum.OUTPAR), new SintaticNode(SintaticEnum.ID, i)); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprList ::= OUTPAR ID COMMA ExprList 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode el = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPRLIST, new SintaticNode(SintaticEnum.OUTPAR), new SintaticNode(SintaticEnum.ID, i), new SintaticNode(SintaticEnum.COMMA), el); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("ExprList",22, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-3)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= BOOL_CONST 
            {
              SintaticNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.BOOL_CONST, b); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= INTEGER_CONST 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.INTEGER_CONST, i); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= REAL_CONST 
            {
              SintaticNode RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.REAL_CONST, r); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= STRING_CONST 
            {
              SintaticNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.STRING_CONST, s); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= ID 
            {
              SintaticNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.ID, i); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= NULL 
            {
              SintaticNode RESULT =null;
		 RESULT = new SintaticNode(SintaticEnum.NULL); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= CallFun 
            {
              SintaticNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode c = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = c; 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr PLUS Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "PLUS", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr MINUS Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "MINUS", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr TIMES Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "TIMES", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr DIV Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "DIV", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr DIVINT Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "DIVINT", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr AND Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "AND", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr POW Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "POW", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr STR_CONCAT Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "STR_CONCAT", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr OR Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "OR", e,  e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr GT Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "GT", e,  e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr GE Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "GE", e,  e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr LT Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "LT", e,  e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr LE Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "LE", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr EQ Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "EQ", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr NE Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e1 = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "NE", e, e1); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= MINUS Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "MINUS", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= NOT Expr 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.peek()).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "NOT", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= LPAR Expr RPAR 
            {
              SintaticNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).right;
		SintaticNode e = (SintaticNode)((java_cup.runtime.Symbol) CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-1)).value;
		 RESULT = new SintaticNode(SintaticEnum.EXPR, "PAR", e); 
              CUP$Syntaxer$result = parser.getSymbolFactory().newSymbol("Expr",23, ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.elementAt(CUP$Syntaxer$top-2)), ((java_cup.runtime.Symbol)CUP$Syntaxer$stack.peek()), RESULT);
            }
          return CUP$Syntaxer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntaxer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntaxer$do_action(
    int                        CUP$Syntaxer$act_num,
    java_cup.runtime.lr_parser CUP$Syntaxer$parser,
    java.util.Stack            CUP$Syntaxer$stack,
    int                        CUP$Syntaxer$top)
    throws java.lang.Exception
    {
              return CUP$Syntaxer$do_action_part00000000(
                               CUP$Syntaxer$act_num,
                               CUP$Syntaxer$parser,
                               CUP$Syntaxer$stack,
                               CUP$Syntaxer$top);
    }
}

}
